import config from "../config.cjs";
import pkg, { prepareWAMessageMedia } from "@whiskeysockets/baileys";
const { generateWAMessageFromContent, proto } = pkg;

// Precompute static data outside the function
const prefix = config.PREFIX || ".";
const imageUrl = "https://files.catbox.moe/y3j3kl.jpg";
const buttons = [
  {
    buttonId: "action",
    buttonText: { displayText: "üìÇ ·¥ç·¥á…¥·¥ú ·¥è·¥ò·¥õ…™·¥è…¥Íú±" },
    type: 4,
    nativeFlowInfo: {
      name: "single_select",
      paramsJson: JSON.stringify({
        title: "üìÇ ùóßùóÆùóΩ ùóõùó≤ùóøùó≤ ùóôùóøùó∂ùó≤ùóªùó±",
        sections: [
          {
            title: "üìÅ ·¥Ñ·¥Äs·¥á è Ä ú·¥è·¥Ö·¥ás ·¥Ä…™",
            highlight_label: "",
            rows: [
              {
                title: ".menu  üìÇ",
                description: "·¥è·¥ò·¥á…¥ ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±",
                id: `.menu`,
              },
              {
                title: ".owner  üëë",
                description: "·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä",
                id: `${prefix}owner`,
              },
              {
                title: ".ping  üì∂",
                description: "·¥õ·¥áÍú±·¥õ  ô·¥è·¥õ Íú±·¥ò·¥á·¥á·¥Ö",
                id: `.ping`,
              },
              {
                title: "üñ•Ô∏è  Íú± èÍú±·¥õ·¥á·¥ç",
                description: "Íú± èÍú±·¥õ·¥á·¥ç …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥",
                id: `${prefix}system`,
              },
              {
                title: ".repo  üõ†Ô∏è",
                description: "…¢…™·¥õ ú·¥ú ô  Ä·¥á·¥ò·¥èÍú±…™·¥õ·¥è Ä è",
                id: `${prefix}repo`,
              },
            ],
          },
        ],
      }),
    },
  },
];

const messageOptions = {
  viewOnce: true,
  buttons,
  contextInfo: {
    mentionedJid: [m => m.sender], // Will be populated dynamically
  },
};

const ping = async (m, Matrix) => {
  // Early return if not a ping command
  if (!m.body?.startsWith(prefix) || !m.body.slice(prefix.length).trim().split(" ")[0].toLowerCase() === "ping") {
    return;
  }
  
  const start = performance.now(); // More precise timing
  await m.React("üì°");
  const responseTime = (performance.now() - start) / 1000;
  
  const text = `*·¥Ñ·¥Äs·¥á è Ä ú·¥è·¥Ö·¥ás ·¥õ·¥á·¥Ñ ú* : ${responseTime.toFixed(2)} s`;
  
  // Create contextInfo with current sender
  const contextInfo = {
    mentionedJid: [m.sender],
  };
  
  await Matrix.sendMessage(
    m.from,
    { 
      image: { url: imageUrl },
      caption: text, 
      ...messageOptions,
      contextInfo // Override with dynamic context
    }, 
    { quoted: m }
  );
};
                             
export default ping;
