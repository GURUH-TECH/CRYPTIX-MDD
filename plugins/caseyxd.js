import moment from 'moment-timezone';
import fs from 'fs';
import os from 'os';
import pkg from '@whiskeysockets/baileys';
const { generateWAMessageFromContent, proto } = pkg;
import config from '../config.cjs';
import axios from 'axios';

// Get total memory and free memory in bytes
const totalMemoryBytes = os.totalmem();
const freeMemoryBytes = os.freemem();

// Define unit conversions
const byteToKB = 1 / 1024;
const byteToMB = byteToKB / 1024;
const byteToGB = byteToMB / 1024;

// Function to format bytes to a human-readable format
function formatBytes(bytes) {
  if (bytes >= Math.pow(1024, 3)) {
    return (bytes * byteToGB).toFixed(2) + ' GB';
  } else if (bytes >= Math.pow(1024, 2)) {
    return (bytes * byteToMB).toFixed(2) + ' MB';
  } else if (bytes >= 1024) {
    return (bytes * byteToKB).toFixed(2) + ' KB';
  } else {
    return bytes.toFixed(2) + ' bytes';
  }
}

// Bot Process Time
const uptime = process.uptime();
const day = Math.floor(uptime / (24 * 3600)); // Calculate days
const hours = Math.floor((uptime % (24 * 3600)) / 3600); // Calculate hours
const minutes = Math.floor((uptime % 3600) / 60); // Calculate minutes
const seconds = Math.floor(uptime % 60); // Calculate seconds

// Uptime
const uptimeMessage = `*I am alive now since ${day}d ${hours}h ${minutes}m ${seconds}s*`;
const runMessage = `*‚òÄÔ∏è ${day} Day*\n*üïê ${hours} Hour*\n*‚è∞ ${minutes} Minutes*\n*‚è±Ô∏è ${seconds} Seconds*\n`;

const xtime = moment.tz("Asia/Colombo").format("HH:mm:ss");
const xdate = moment.tz("Asia/Colombo").format("DD/MM/YYYY");
const time2 = moment().tz("Asia/Colombo").format("HH:mm:ss");
let pushwish = "";

if (time2 < "05:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "11:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "15:00:00") {
  pushwish = `Good Afternoon üåÖ`;
} else if (time2 < "18:00:00") {
  pushwish = `Good Evening üåÉ`;
} else if (time2 < "19:00:00") {
  pushwish = `Good Evening üåÉ`;
} else {
  pushwish = `Good Night üåå`;
}

const menu = async (m, Matrix) => {
  const prefix = config.PREFIX;
  const cmd = m.body.startsWith(prefix) ? m.body.slice(prefix.length).split(' ')[0].toLowerCase() : '';
  const mode = config.MODE === 'public' ? 'public' : 'private';
  const pref = config.PREFIX;
  const pushname = m.pushName || 'User'; // Added fallback for pushname

  const validCommands = ['list', 'help', 'menu2'];

  if (validCommands.includes(cmd)) {
    const mainMenu = `_üåü *Good ${
  new Date().getHours() < 12 ? 'Morning' : 
  (new Date().getHours() < 18 ? 'Afternoon' : 'Evening')
}, ${pushname}!* üåü_
*‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑*
*‚îä‚Ä¢ üñºÔ∏è …¢ Ä·¥á·¥á·¥õ :-* ${pushwish}
*‚îä‚Ä¢ ‚è∞ ·¥õ…™·¥ç·¥á :-* *${xtime}*
*‚îä‚Ä¢ üìÖ ·¥Ö·¥Ä·¥õ·¥á :-* *${xdate}*
*‚îä‚Ä¢ üé≠  ô·¥è·¥õ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö :-* *·¥Ñ·¥Äs·¥á è Ä ú·¥è·¥Ö·¥ás ·¥õ·¥á·¥Ñ ú ·¥¢·¥è…¥·¥á*
*‚îä‚Ä¢ üìç ·¥Ä·¥Ñ·¥õ…™·¥†·¥á Íú±·¥áÍú±Íú±…™·¥è…¥Íú± :-* *${Matrix.user.id}*
*‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑*

* ú·¥á ü ü·¥è  ô Ä·¥è ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥Ñ·¥Äs·¥á è Ä ú·¥è·¥Ö·¥ás ·¥ç…™…¥…™  ô·¥è·¥õ ‚òÉÔ∏è , ·¥Ä ·¥ç·¥ú ü·¥õ…™ ·¥Ö·¥á·¥†…™·¥Ñ·¥á ·¥ò·¥è·¥°·¥á ÄÍú∞·¥ú ü Íú∞ Ä·¥á·¥á  ô·¥è·¥õ. ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ñ·¥Äs·¥á è Ä ú·¥è·¥Ö·¥ás ·¥õ·¥á·¥Ñ ú ·¥¢·¥è…¥·¥á ·¥õ·¥á·¥Ä·¥ç*üì¨

*üåê CASEYRHODES MINI BOT Website :*
> 

*¬© ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è ·¥õ ú·¥á ·¥Ñ·¥Äs·¥á è Ä ú·¥è·¥Ö·¥ás ·¥õ·¥á·¥Ñ ú ·¥¢·¥è…¥·¥á*`;

    // Function to get menu image
    const getMenuImage = async () => {
      if (config.MENU_IMAGE && config.MENU_IMAGE.trim() !== '') {
        try {
          const response = await axios.get(config.MENU_IMAGE, { responseType: 'arraybuffer' });
          return Buffer.from(response.data, 'binary');
        } catch (error) {
          console.error('Error fetching menu image from URL, falling back to local image:', error);
          try {
            return fs.readFileSync('./media/Casey.jpg');
          } catch (err) {
            console.error('Error reading local image file:', err);
            return null;
          }
        }
      } else {
        try {
          return fs.readFileSync('./media/Casey.jpg');
        } catch (err) {
          console.error('Error reading local image file:', err);
          return null;
        }
      }
    };

    const menuImage = await getMenuImage();
    
    // Create buttons for menu selection in 3x3 grid like the image
    const buttons = [
      {
        buttonId: `${prefix}menu 1`, 
        buttonText: {displayText: 'üì• DOWNLOAD'}, 
        type: 1
      },
      {
        buttonId: `${prefix}menu 2`, 
        buttonText: {displayText: 'üîÑ CONVERTER'}, 
        type: 1
      },
      {
        buttonId: `${prefix}menu 3`, 
        buttonText: {displayText: 'ü§ñ AI MENU'}, 
        type: 1
      },
      {
        buttonId: `${prefix}menu 4`, 
        buttonText: {displayText: 'üõ†Ô∏è TOOLS'}, 
        type: 1
      },
      {
        buttonId: `${prefix}menu 5`, 
        buttonText: {displayText: 'üë• GROUP'}, 
        type: 1
      },
      {
        buttonId: `${prefix}menu 6`, 
        buttonText: {displayText: 'üîç SEARCH'}, 
        type: 1
      },
      {
        buttonId: `${prefix}menu 7`, 
        buttonText: {displayText: 'üè† MAIN'}, 
        type: 1
      },
      {
        buttonId: `${prefix}menu 8`, 
        buttonText: {displayText: 'üëë OWNER'}, 
        type: 1
      },
      {
        buttonId: `${prefix}menu 9`, 
        buttonText: {displayText: 'üëÄ STALK'}, 
        type: 1
      }
    ];

    const buttonMessage = {
      image: menuImage,
      caption: mainMenu,
      footer: `CHOOSE MENU TAB`,
      buttons: buttons,
      headerType: 4,
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363302677217436@newsletter',
          newsletterName: "CASEYRHODES-XMD üëª",
          serverMessageId: 143
        }
      }
    };

    await Matrix.sendMessage(m.from, buttonMessage, { quoted: m });

    // Send audio after sending the menu
    try {
      await Matrix.sendMessage(m.from, {
        audio: { url: 'https://files.catbox.moe/m0xfku.mp3' },
        mimetype: 'audio/mp4',
        ptt: true
      }, { quoted: m });
    } catch (error) {
      console.error('Error sending audio:', error);
    }
  }
};

// Handle button responses
const handleMenuButton = async (m, Matrix) => {
  const prefix = config.PREFIX;
  const body = m.body.trim();
  
  if (body.startsWith(`${prefix}menu`)) {
    const parts = body.split(' ');
    if (parts.length < 2) return;
    
    const menuNumber = parts[1];
    let menuResponse;
    let menuTitle;
    
    switch (menuNumber) {
      case "1":
        menuTitle = "Download Menu";
        menuResponse = `
‚ï≠‚îÅ‚îÅ„Äî *Download Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ apk
‚îÉ‚óà‚îÉ‚Ä¢ facebook
‚îÉ‚óà‚îÉ‚Ä¢ mediafire
‚îÉ‚óà‚îÉ‚Ä¢ pinterestdl
‚îÉ‚óà‚îÉ‚Ä¢ gitclone
‚îÉ‚óà‚îÉ‚Ä¢ gdrive
‚îÉ‚óà‚îÉ‚Ä¢ insta
‚îÉ‚óà‚îÉ‚Ä¢ ytmp3
‚îÉ‚óà‚îÉ‚Ä¢ ytmp4
‚îÉ‚óà‚îÉ‚Ä¢ play
‚îÉ‚óà‚îÉ‚Ä¢ song
‚îÉ‚óà‚îÉ‚Ä¢ video
‚îÉ‚óà‚îÉ‚Ä¢ ytmp3doc
‚îÉ‚óà‚îÉ‚Ä¢ ytmp4doc
‚îÉ‚óà‚îÉ‚Ä¢ tiktok
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑`;
        break;
        
      case "2":
        menuTitle = "Converter Menu";
        menuResponse = `
‚ï≠‚îÅ‚îÅ„Äî *Converter Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ attp
‚îÉ‚óà‚îÉ‚Ä¢ attp2
‚îÉ‚óà‚îÉ‚Ä¢ attp3
‚îÉ‚óà‚îÉ‚Ä¢ ebinary
‚îÉ‚óà‚îÉ‚Ä¢ dbinary
‚îÉ‚óà‚îÉ‚Ä¢ emojimix
‚îÉ‚óà‚îÉ‚Ä¢ mp3
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑`;
        break;
        
      case "3":
        menuTitle = "AI Menu";
        menuResponse = `
‚ï≠‚îÅ‚îÅ„Äî *AI Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ ai
‚îÉ‚óà‚îÉ‚Ä¢ bug
‚îÉ‚óà‚îÉ‚Ä¢ report
‚îÉ‚óà‚îÉ‚Ä¢ gpt
‚îÉ‚óà‚îÉ‚Ä¢ dalle
‚îÉ‚óà‚îÉ‚Ä¢ remini
‚îÉ‚óà‚îÉ‚Ä¢ gemini
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑`;
        break;
        
      case "4":
        menuTitle = "Tools Menu";
        menuResponse = `
‚ï≠‚îÅ‚îÅ„Äî *Tools Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ calculator
‚îÉ‚óà‚îÉ‚Ä¢ tempmail
‚îÉ‚óà‚îÉ‚Ä¢ checkmail
‚îÉ‚óà‚îÉ‚Ä¢ trt
‚îÉ‚óà‚îÉ‚Ä¢ tts
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑`;
        break;
        
      case "5":
        menuTitle = "Group Menu";
        menuResponse = `
‚ï≠‚îÅ‚îÅ„Äî *Group Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ linkgroup
‚îÉ‚óà‚îÉ‚Ä¢ setppgc
‚îÉ‚óà‚îÉ‚Ä¢ setname
‚îÉ‚óà‚îÉ‚Ä¢ setdesc
‚îÉ‚óà‚îÉ‚Ä¢ group
‚îÉ‚óà‚îÉ‚Ä¢ gcsetting
‚îÉ‚óà‚îÉ‚Ä¢ welcome
‚îÉ‚óà‚îÉ‚Ä¢ add
‚îÉ‚óà‚îÉ‚Ä¢ kick
‚îÉ‚óà‚îÉ‚Ä¢ hidetag
‚îÉ‚óà‚îÉ‚Ä¢ tagall
‚îÉ‚óà‚îÉ‚Ä¢ antilink
‚îÉ‚óà‚îÉ‚Ä¢ antitoxic
‚îÉ‚óà‚îÉ‚Ä¢ promote
‚îÉ‚óà‚îÉ‚Ä¢ demote
‚îÉ‚óà‚îÉ‚Ä¢ getbio
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑`;
        break;
        
      case "6":
        menuTitle = "Search Menu";
        menuResponse = `
‚ï≠‚îÅ‚îÅ„Äî *Search Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ play
‚îÉ‚óà‚îÉ‚Ä¢ yts
‚îÉ‚óà‚îÉ‚Ä¢ imdb
‚îÉ‚óà‚îÉ‚Ä¢ google
‚îÉ‚óà‚îÉ‚Ä¢ gimage
‚îÉ‚óà‚îÉ‚Ä¢ pinterest
‚îÉ‚óà‚îÉ‚Ä¢ wallpaper
‚îÉ‚óà‚îÉ‚Ä¢ wikimedia
‚îÉ‚óà‚îÉ‚Ä¢ ytsearch
‚îÉ‚óà‚îÉ‚Ä¢ ringtone
‚îÉ‚óà‚îÉ‚Ä¢ lyrics
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑`;
        break;
        
      case "7":
        menuTitle = "Main Menu";
        menuResponse = `
‚ï≠‚îÅ‚îÅ„Äî *Main Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ ping
‚îÉ‚óà‚îÉ‚Ä¢ alive
‚îÉ‚óà‚îÉ‚Ä¢ owner
‚îÉ‚óà‚îÉ‚Ä¢ menu
‚îÉ‚óà‚îÉ‚Ä¢ infobot
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑`;
        break;
        
      case "8":
        menuTitle = "Owner Menu";
        menuResponse = `
‚ï≠‚îÅ‚îÅ„Äî *Owner Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ join
‚îÉ‚óà‚îÉ‚Ä¢ leave
‚îÉ‚óà‚îÉ‚Ä¢ block
‚îÉ‚óà‚îÉ‚Ä¢ unblock
‚îÉ‚óà‚îÉ‚Ä¢ setppbot
‚îÉ‚óà‚îÉ‚Ä¢ anticall
‚îÉ‚óà‚îÉ‚Ä¢ setstatus
‚îÉ‚óà‚îÉ‚Ä¢ setnamebot
‚îÉ‚óà‚îÉ‚Ä¢ autotyping
‚îÉ‚óà‚îÉ‚Ä¢ alwaysonline
‚îÉ‚óà‚îÉ‚Ä¢ autoread
‚îÉ‚óà‚îÉ‚Ä¢ autosview
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑`;
        break;
        
      case "9":
        menuTitle = "Stalk Menu";
        menuResponse = `
‚ï≠‚îÅ‚îÅ„Äî *Stalk Menu* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ truecaller
‚îÉ‚óà‚îÉ‚Ä¢ instastalk
‚îÉ‚óà‚îÉ‚Ä¢ githubstalk
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑`;
        break;
        
      default:
        menuTitle = "Invalid Choice";
        menuResponse = "*Invalid menu selection. Please use the buttons provided.*";
    }

    // Format the full response with title and description
    const fullResponse = `
‚ï≠‚îÅ‚îÅ‚îÅ„Äî *${config.BOT_NAME || 'CASEYRHODES BOT'} - ${menuTitle}* „Äï‚îÅ‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚òÖ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÉ‚òÖ‚îÇ‚Ä¢ Owner : *${config.OWNER_NAME || 'CaseyRhodes'}*
‚îÉ‚òÖ‚îÇ‚Ä¢ User : *${m.pushName || 'User'}*
‚îÉ‚òÖ‚îÇ‚Ä¢ Prefix : [${prefix}]
‚îÉ‚òÖ‚îÇ‚Ä¢ Version : *3.1.0*
‚îÉ‚òÖ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îà‚ä∑

${menuResponse}

> *${config.DESCRIPTION || 'Powered by CaseyRhodes Tech Zone'}*`;

    // Function to get menu image
    const getMenuImage = async () => {
      if (config.MENU_IMAGE && config.MENU_IMAGE.trim() !== '') {
        try {
          const response = await axios.get(config.MENU_IMAGE, { responseType: 'arraybuffer' });
          return Buffer.from(response.data, 'binary');
        } catch (error) {
          console.error('Error fetching menu image from URL, falling back to local image:', error);
          try {
            return fs.readFileSync('./media/Casey.jpg');
          } catch (err) {
            console.error('Error reading local image file:', err);
            return null;
          }
        }
      } else {
        try {
          return fs.readFileSync('./media/Casey.jpg');
        } catch (err) {
          console.error('Error reading local image file:', err);
          return null;
        }
      }
    };

    const menuImage = await getMenuImage();

    // Create back button
    const backButton = [
      {buttonId: `${prefix}menu`, buttonText: {displayText: 'üîô BACK TO MAIN MENU'}, type: 1}
    ];

    const buttonMessage = {
      image: menuImage,
      caption: fullResponse,
      footer: `CHOOSE MENU TAB`,
      buttons: backButton,
      headerType: 4,
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363302677217436@newsletter',
          newsletterName: "CASEYRHODES-XMD üëª",
          serverMessageId: 143
        }
      }
    };

    // Send the response with image and context info
    await Matrix.sendMessage(m.from, buttonMessage, {
      quoted: m
    });
  }
};

export { menu, handleMenuButton };
